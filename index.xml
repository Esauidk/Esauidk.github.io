<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Esau's Page</title><link>/</link><description>Recent content on Esau's Page</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 16 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Game Development Club Tutorial: Top Down Shooter</title><link>/p/game-development-club-tutorial-top-down-shooter/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>/p/game-development-club-tutorial-top-down-shooter/</guid><description>&lt;img src="https://media.giphy.com/media/22VCh90itjL8rr5uza/giphy.gif" alt="Featured image of post Game Development Club Tutorial: Top Down Shooter" />&lt;h1 id="welcome">Welcome!&lt;/h1>
&lt;p>Welcome to the top down shooter tutorial! The purpose of this blog is to be used to follow along during the game development club tutorial meeting but all are welcome to view this and learn from it!&lt;/p>
&lt;h1 id="getting-started">Getting Started&lt;/h1>
&lt;h2 id="downloading-unity">Downloading Unity&lt;/h2>
&lt;p>If you don&amp;rsquo;t already have Unity downloaded, go ahead and download the &lt;strong>&lt;a class="link" href="https://unity.com/download" target="_blank" rel="noopener"
>hub&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 289;
flex-basis: 695px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/hub.png" data-size="2880x994">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/hub.png"
width="2880"
height="994"
srcset="/p/game-development-club-tutorial-top-down-shooter/hub_huf68e7d75c7449343d525c7587c72f428_2271721_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/hub_huf68e7d75c7449343d525c7587c72f428_2271721_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Hub">
&lt;/a>
&lt;figcaption>Hub&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Finishing signing in and navigate to the editor installation area&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 171;
flex-basis: 411px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/editorinstall.png" data-size="2034x1186">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/editorinstall.png"
width="2034"
height="1186"
srcset="/p/game-development-club-tutorial-top-down-shooter/editorinstall_huc99350abe2beda552a92cfe894d0671f_187908_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/editorinstall_huc99350abe2beda552a92cfe894d0671f_187908_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Editor">
&lt;/a>
&lt;figcaption>Editor&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>This tutorial will be using version &lt;strong>2021.3.11f1&lt;/strong> but what matters is that you use a version that is &lt;strong>2021.3.x&lt;/strong> and is &lt;strong>LTS&lt;/strong>&lt;/p>
&lt;h2 id="creating-project">Creating Project&lt;/h2>
&lt;p>We&amp;rsquo;re going to be creating a top down shooter so we&amp;rsquo;re going to want to use the 2D URP (Universal Render Pipeline). To ensures that the proper render settings are set&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 171;
flex-basis: 411px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/projectCreation.png" data-size="2018x1178">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/projectCreation.png"
width="2018"
height="1178"
srcset="/p/game-development-club-tutorial-top-down-shooter/projectCreation_hued6da820c98a54858c880b76565674f7_362215_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/projectCreation_hued6da820c98a54858c880b76565674f7_362215_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="project">
&lt;/a>
&lt;figcaption>project&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h1 id="unity-introduction">Unity Introduction&lt;/h1>
&lt;p>In case unity is new to you, here is a quick overivew of the parts of the unity editor&lt;/p>
&lt;h2 id="hierarchy">Hierarchy&lt;/h2>
&lt;p>This section of the editor shows you all the gameobjects in your scene and their relations to each other&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 52;
flex-basis: 127px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/hierarchy.png" data-size="544x1028">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/hierarchy.png"
width="544"
height="1028"
srcset="/p/game-development-club-tutorial-top-down-shooter/hierarchy_hu6ad4b4a24514b1fbaad76da5d33b511b_36917_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/hierarchy_hu6ad4b4a24514b1fbaad76da5d33b511b_36917_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="hierarchy">
&lt;/a>
&lt;figcaption>hierarchy&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="views">Views&lt;/h2>
&lt;p>There are two different cameras in use in the unity editor: the game camera &amp;amp; the scene camera&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 96;
flex-basis: 231px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/views.png" data-size="1680x1744">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/views.png"
width="1680"
height="1744"
srcset="/p/game-development-club-tutorial-top-down-shooter/views_hud4b7edc257eeba3ccfb18d4a5f2a8439_191435_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/views_hud4b7edc257eeba3ccfb18d4a5f2a8439_191435_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="views">
&lt;/a>
&lt;figcaption>views&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="scene-view">Scene View&lt;/h3>
&lt;p>The scene view is connected to the scene camera, this is controllable by the user and allows you to see around your scene&lt;/p>
&lt;h3 id="game-view">Game View&lt;/h3>
&lt;p>The game view is connected to the game camera, this is what the player &lt;em>potentially&lt;/em> will see (potentially because there can be more than one game camera in a scene). This is represented by an object in your scene marked as a camera. You can only move it if you move the camera object.&lt;/p>
&lt;h2 id="inspector">Inspector&lt;/h2>
&lt;p>Unity is a component based engine, this means that every object stores a collection of different scripts that do different things, they are all ran doing the object&amp;rsquo;s execution&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 72;
flex-basis: 174px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/inspector.png" data-size="698x960">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/inspector.png"
width="698"
height="960"
srcset="/p/game-development-club-tutorial-top-down-shooter/inspector_hu989e304cc4d6ef1cb1c48c4d3e382ae7_102469_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/inspector_hu989e304cc4d6ef1cb1c48c4d3e382ae7_102469_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="inspector">
&lt;/a>
&lt;figcaption>inspector&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="project--console">Project &amp;amp; Console&lt;/h2>
&lt;p>Project allows you to view all the assets you have available for use&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 222;
flex-basis: 534px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/project.png" data-size="1540x692">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/project.png"
width="1540"
height="692"
srcset="/p/game-development-club-tutorial-top-down-shooter/project_hu500896361bcf0faa43656b077628b6df_116898_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/project_hu500896361bcf0faa43656b077628b6df_116898_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="project">
&lt;/a>
&lt;figcaption>project&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>The console is a window used for debugging, it allows you to print information from your code&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 238;
flex-basis: 572px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/console.png" data-size="1546x648">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/console.png"
width="1546"
height="648"
srcset="/p/game-development-club-tutorial-top-down-shooter/console_hue79bc5d69054524e8cfce69ec59a4cc8_38052_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/console_hue79bc5d69054524e8cfce69ec59a4cc8_38052_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="console">
&lt;/a>
&lt;figcaption>console&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h1 id="player">Player&lt;/h1>
&lt;p>Getting started on making this top down, let&amp;rsquo;s start with the player&lt;/p>
&lt;h2 id="sprite">Sprite&lt;/h2>
&lt;p>We need some way to represent the character! We&amp;rsquo;re going to use the default spirtes available in unity to create the player&lt;/p>
&lt;p>We&amp;rsquo;re going to create an empty gameboject and call it &lt;strong>playe&lt;/strong>r&lt;/p>
&lt;p>We&amp;rsquo;re going to creating the body and call it &lt;strong>body&lt;/strong> and attach it to &lt;strong>player&lt;/strong>
&lt;figure
class="gallery-image"
style="
flex-grow: 157;
flex-basis: 377px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/creatingSpirte.png" data-size="2158x1372">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/creatingSpirte.png"
width="2158"
height="1372"
srcset="/p/game-development-club-tutorial-top-down-shooter/creatingSpirte_huf614cf6ca2f0abab915c5efae4f9e3fb_455484_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/creatingSpirte_huf614cf6ca2f0abab915c5efae4f9e3fb_455484_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="spirte">
&lt;/a>
&lt;figcaption>spirte&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Let&amp;rsquo;s make this a tank! We&amp;rsquo;re going to attach the canon to it by creating another defaut sprite but attaching it to the &lt;strong>body&lt;/strong> GameObject. We&amp;rsquo;re also going to scale it to become a canon. We&amp;rsquo;re also going to name this gameobject &lt;strong>canon&lt;/strong>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 290;
flex-basis: 696px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/createCanon.png" data-size="2872x990">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/createCanon.png"
width="2872"
height="990"
srcset="/p/game-development-club-tutorial-top-down-shooter/createCanon_hu338291832793733b8c1f85cd6ce6e9dd_301984_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/createCanon_hu338291832793733b8c1f85cd6ce6e9dd_301984_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="canon">
&lt;/a>
&lt;figcaption>canon&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Perfect! Now we have our tank&lt;/p>
&lt;h2 id="movement">Movement&lt;/h2>
&lt;p>Now that we have a tank, let&amp;rsquo;s make it move!&lt;/p>
&lt;p>Let&amp;rsquo;s create our own custom code for this, navigate to the player object, click on it, and in the inspector click &amp;ldquo;add compoent&amp;rdquo;&lt;/p>
&lt;p>Navigate to the bottom of the of the components options and click &amp;ldquo;new script&amp;rdquo; and call it &lt;code>PlayerController&lt;/code>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/creatingController.png" data-size="2880x1800">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/creatingController.png"
width="2880"
height="1800"
srcset="/p/game-development-club-tutorial-top-down-shooter/creatingController_hu63cd197203e8f773d3685414daf2ea57_461832_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/creatingController_hu63cd197203e8f773d3685414daf2ea57_461832_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="controller">
&lt;/a>
&lt;figcaption>controller&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Inside of our new script we&amp;rsquo;re going to write this!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="nn">UnityEngine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">PlayerController&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">MonoBehaviour&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">movementSpeed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Start is called before the first frame update&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">Start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Update is called once per frame&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">Update&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HandleMovement&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">HandleMovement&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// If our horizontal buttons are pressed (a or d)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetButton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Horizontal&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// which direction are we pressing (-1 == left and 1 == right)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">direction&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Horizontal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Update our horizontal position &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// (multiple by Time.deltaTime to ensure proper movement if frames come faster or later than normal)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Vector3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">direction&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">movementSpeed&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// If our vertical buttons are pressed (w or s)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetButton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Vertical&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// which direction are we pressing (-1 == down and 1 == up)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">direction&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAxis&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Vertical&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Update our vertical position &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// (multiple by Time.deltaTime to ensure proper movement if frames come faster or later than normal)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Vector3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deltaTime&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">direction&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">movementSpeed&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transform&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will update our position by a certain movement speed each frame if the vertical or horizontal buttons are pressed. This uses Unity&amp;rsquo;s input system (allows you to define specific inputs for actions)&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://media.giphy.com/media/0OfX7KEi59eIHkxg2V/giphy.gif" >
&lt;img src="https://media.giphy.com/media/0OfX7KEi59eIHkxg2V/giphy.gif"
loading="lazy"
alt="movementFinished">
&lt;/a>
&lt;figcaption>movementFinished&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="shooting">Shooting&lt;/h2>
&lt;p>Now that we can move, let&amp;rsquo;s move on to shooting canonballs out of our canon!&lt;/p>
&lt;p>To start off, let&amp;rsquo;s create out canon. We&amp;rsquo;re going to create the canon the same way we create the body of tank (with a circle sprite), but we&amp;rsquo;re going to scale down by some degree (you can choose what you&amp;rsquo;d like)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/canonball.png" data-size="2880x1800">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/canonball.png"
width="2880"
height="1800"
srcset="/p/game-development-club-tutorial-top-down-shooter/canonball_hu63cd197203e8f773d3685414daf2ea57_495777_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/canonball_hu63cd197203e8f773d3685414daf2ea57_495777_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="canonballs">
&lt;/a>
&lt;figcaption>canonballs&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="prefabs">Prefabs&lt;/h3>
&lt;p>Since this is our canon balls, we&amp;rsquo;re going to need to create multiple copies of these. Prefabs are a way to store your GameObjects as assets to be used and copied later. To make this canon a prefab you just need to drag the gameobject from the hierarchy to the project tab. Let&amp;rsquo;s make the player a prefab too!&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 474;
flex-basis: 1138px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/prefabs.png" data-size="1044x220">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/prefabs.png"
width="1044"
height="220"
srcset="/p/game-development-club-tutorial-top-down-shooter/prefabs_huf0dfd54df6265e6b35ebac0cad7b2cbe_40564_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/prefabs_huf0dfd54df6265e6b35ebac0cad7b2cbe_40564_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="prefab">
&lt;/a>
&lt;figcaption>prefab&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>With that we&amp;rsquo;re going to go back to our &lt;code>PlayerController&lt;/code> and add a fire ability&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">movementSpeed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="n">GameObject&lt;/span> &lt;span class="n">canonBall&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="n">Transform&lt;/span> &lt;span class="n">canonSpawnLocation&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Start is called before the first frame update&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">Start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Update is called once per frame&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">Update&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HandleMovement&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HandleCanonFiring&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">HandleCanonFiring&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetButtonDown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Fire1&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Instantiate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">canonBall&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">canonSpawnLocation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Quaternion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">identity&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Instantiate()&lt;/code> spawns a prefab into the scene world, in this usage at the location where we want the canonballs to spawn at. You can ignore &lt;code>Quaternion.identity&lt;/code> it represents a rotation of 0 degrees in all axis&amp;rsquo;s&lt;/p>
&lt;p>Make sure to set &lt;code>canonBall&lt;/code> to be the canonball prefab, you can set this in the inspector. And set the &lt;code>canonSpawnLocation&lt;/code> variable/field to be a transform of where you want the canonball to spawn at(you can do this by creating an empty gameobject and place it in the place you want the canonball to be placed)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 160;
flex-basis: 384px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/canonBallSpawn.png" data-size="2880x1800">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/canonBallSpawn.png"
width="2880"
height="1800"
srcset="/p/game-development-club-tutorial-top-down-shooter/canonBallSpawn_hu63cd197203e8f773d3685414daf2ea57_470077_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/canonBallSpawn_hu63cd197203e8f773d3685414daf2ea57_470077_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="canonBallSpawn">
&lt;/a>
&lt;figcaption>canonBallSpawn&lt;/figcaption>
&lt;/figure>
&lt;figure
class="gallery-image"
style="
flex-grow: 238;
flex-basis: 573px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/canonSpawnLocation.png" data-size="1606x672">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/canonSpawnLocation.png"
width="1606"
height="672"
srcset="/p/game-development-club-tutorial-top-down-shooter/canonSpawnLocation_hu048a8d37821d32b19aa2f919257e04b5_100909_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/canonSpawnLocation_hu048a8d37821d32b19aa2f919257e04b5_100909_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="canonSpawnLocation">
&lt;/a>
&lt;figcaption>canonSpawnLocation&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://media.giphy.com/media/TMtRL5FlQvgy2orVml/giphy.gif" >
&lt;img src="https://media.giphy.com/media/TMtRL5FlQvgy2orVml/giphy.gif"
loading="lazy"
alt="canonSpawnComplete">
&lt;/a>
&lt;figcaption>canonSpawnComplete&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>As you can tell, our canonballs aren&amp;rsquo;t&amp;hellip;.moving&lt;/p>
&lt;h3 id="rigidbody">Rigidbody&lt;/h3>
&lt;p>That&amp;rsquo;s where rigidbodies come into play! Unity has its own physics system that allows you to act physics upon game objects in your scene. Rigidbody allows you to act forces onto your object (like gravity, friction, and other forces)&lt;/p>
&lt;p>Go ahead an add a &lt;code>rigibody2D&lt;/code> component to the canonball gameobject prefab&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 48;
flex-basis: 117px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/rigidbody.png" data-size="694x1422">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/rigidbody.png"
width="694"
height="1422"
srcset="/p/game-development-club-tutorial-top-down-shooter/rigidbody_hu9f0c0599c81836aabde0c6b8bd50e728_169888_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/rigidbody_hu9f0c0599c81836aabde0c6b8bd50e728_169888_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="rigidbody">
&lt;/a>
&lt;figcaption>rigidbody&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>If you played the game as is you&amp;rsquo;ll see that the canonballs just falls downwards to the void, this is because by default, gravity is acted on the canonball. Since we&amp;rsquo;re doing a top down shooter, we don&amp;rsquo;t want this to happen.&lt;/p>
&lt;p>Go back to the &lt;code>rigidobdy2D&lt;/code> component and set the gravity scale to 0, now gravity will no longer act upon our canonball. While you&amp;rsquo;re at it, go to the constraints section and toggle the free z-rotation option.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/rigidbodySettings.png" data-size="676x674">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/rigidbodySettings.png"
width="676"
height="674"
srcset="/p/game-development-club-tutorial-top-down-shooter/rigidbodySettings_hue4c6f3bc4f3c7f3b1faaf72a2788829c_77420_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/rigidbodySettings_hue4c6f3bc4f3c7f3b1faaf72a2788829c_77420_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="rigidbodySetting">
&lt;/a>
&lt;figcaption>rigidbodySetting&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="canonball-impulse">Canonball Impulse&lt;/h3>
&lt;p>Now that we can have forces act upon our canonballs, it&amp;rsquo;s time to write the code to do that. We&amp;rsquo;re going to create a new script called &lt;code>CanonballAction&lt;/code> and attach it to the canonball gameobject prefab&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="nn">UnityEngine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">CanonballAction&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">MonoBehaviour&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="n">Rigidbody2D&lt;/span> &lt;span class="n">rb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Start is called before the first frame update&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">Start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// GetComponent grabs a reference of a type of component living on this gameobject &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// can be null if the type isn&amp;#39;t living on this gameobject&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rb&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">GetComponent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Rigidbody2D&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Send this object in direction with a magnitude of force&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">SendBall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Vector2&lt;/span> &lt;span class="n">direction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">force&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rb&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rb&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">GetComponent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Rigidbody2D&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddForce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direction&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">force&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We then go back to &lt;code>PlayerController&lt;/code> and use the &lt;code>SendBall&lt;/code> method to make the canonball to move on creation&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">movementSpeed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [Range(200, 500)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">canonForce&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="n">GameObject&lt;/span> &lt;span class="n">canonBall&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="n">Transform&lt;/span> &lt;span class="n">canonSpawnLocation&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">HandleCanonFiring&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetButtonDown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Fire1&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GameObject&lt;/span> &lt;span class="n">ball&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Instantiate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">canonBall&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">canonSpawnLocation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Quaternion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">identity&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CanonballAction&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ball&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetComponent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">CanonballAction&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SendBall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">canonSpawnLocation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">up&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">canonForce&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that we now have a shooting tank!&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://media.giphy.com/media/FDvaLOeTIgCDncGN72/giphy.gif" >
&lt;img src="https://media.giphy.com/media/FDvaLOeTIgCDncGN72/giphy.gif"
loading="lazy"
alt="tankShoot">
&lt;/a>
&lt;figcaption>tankShoot&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="aiming">Aiming&lt;/h2>
&lt;p>So&amp;hellip; we can move and shoot, but only aim in one direction what do I do if there is an enemy to my right, left, or behind me???&lt;/p>
&lt;h3 id="rotating-the-body">Rotating the body&lt;/h3>
&lt;p>So if you remember our player&amp;rsquo;s hierarchy, it goes Empty - &amp;gt; Body -&amp;gt; Canon. And movement happens on Empty. Since we don&amp;rsquo;t want movement to be affected by rotation, we will enact rotation on the body! This way visually it will look like it&amp;rsquo;s rotated in underneath, but everything is still the same. We will go to &lt;code>PlayerController&lt;/code> and add some stuff&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [SerializeField]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="n">Transform&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">Update&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HandleMovement&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HandleCanonFiring&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HandleOrientation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Does math to calculate the angle to rotate the body so it is facing towards the mouse&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">HandleOrientation&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Vector3&lt;/span> &lt;span class="n">mousePos&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mousePosition&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Vector3&lt;/span> &lt;span class="n">objectPos&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Camera&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WorldToScreenPoint&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mousePos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mousePos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">objectPos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mousePos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mousePos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">objectPos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">angle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Mathf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Atan2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mousePos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mousePos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">Mathf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Rad2Deg&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rotation&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Quaternion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Euler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Vector3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">angle&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">90&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might have noticed the canonballs are still moving in a straight up direction, that&amp;rsquo;s because of our hierarchy!&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 261;
flex-basis: 628px"
>
&lt;a href="/p/game-development-club-tutorial-top-down-shooter/hierarchyIssue.png" data-size="550x210">
&lt;img src="/p/game-development-club-tutorial-top-down-shooter/hierarchyIssue.png"
width="550"
height="210"
srcset="/p/game-development-club-tutorial-top-down-shooter/hierarchyIssue_hu1deb7d851e4545fee68c453532a2a8d6_22667_480x0_resize_box_3.png 480w, /p/game-development-club-tutorial-top-down-shooter/hierarchyIssue_hu1deb7d851e4545fee68c453532a2a8d6_22667_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="hierarchyIssue">
&lt;/a>
&lt;figcaption>hierarchyIssue&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>If you take a look, the CanonSpawnLocation object (which is used for both deciding where to spawn the canonballs and what the &lt;strong>direction&lt;/strong> of their movement is) is not under the body. This means that when the body rotates, the spawner does not! Let&amp;rsquo;s fixing that by moving the spawner to be under the body&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://media.giphy.com/media/GC3bMkUfVRmTjHZh0W/giphy.gif" >
&lt;img src="https://media.giphy.com/media/GC3bMkUfVRmTjHZh0W/giphy.gif"
loading="lazy"
alt="workingTank">
&lt;/a>
&lt;figcaption>workingTank&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Viola! A working moving, shooting, and rotating tank!&lt;/p></description></item><item><title>My Unreal Adventure! Blog 1: Unreal Engine Intro</title><link>/p/my-unreal-adventure-blog-1-unreal-engine-intro/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate><guid>/p/my-unreal-adventure-blog-1-unreal-engine-intro/</guid><description>&lt;img src="https://media.giphy.com/media/22VCh90itjL8rr5uza/giphy.gif" alt="Featured image of post My Unreal Adventure! Blog 1: Unreal Engine Intro" />&lt;p>&lt;strong>Ever heard of Unreal Engine?&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://knowtechie.com/wp-content/uploads/2022/04/unreal-engine-5.jpg" >
&lt;img src="https://knowtechie.com/wp-content/uploads/2022/04/unreal-engine-5.jpg"
loading="lazy"
alt="Image of Unreal Engine Logo">
&lt;/a>
&lt;figcaption>Image of Unreal Engine Logo&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://www.spieltimes.com/wp-content/uploads/2022/04/Unreal-Engine-5.jpg" >
&lt;img src="https://www.spieltimes.com/wp-content/uploads/2022/04/Unreal-Engine-5.jpg"
loading="lazy"
alt="Image from Unreal Engine 5 Teaser">
&lt;/a>
&lt;figcaption>Image from Unreal Engine 5 Teaser&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h1 id="quick-explanation-of-unreal">Quick Explanation of Unreal&lt;/h1>
&lt;p>Unreal Engine is a 3D creation tool that primarily enables game developers to create 3D envionrments and experiences. In there own definition:&lt;/p>
&lt;blockquote>
&lt;p>Free to download, Unreal Engine comes with everything you need to build and ship successful multi-platform games and location-based entertainment for any genre. With full access to source code, a robust C++ API, and Blueprint visual scripting at your fingertips, you can develop your title any way you like.&lt;/p>
&lt;/blockquote>
&lt;h1 id="what-am-i-doing-with-unreal">What Am I Doing With Unreal?&lt;/h1>
&lt;p>Me, wanted to start a new hobby game dev project, decided to start working on a first person game! After many years of using &lt;a class="link" href="https://unity.com/" target="_blank" rel="noopener"
>Unity&lt;/a>, I thought it would be a great chance to finally learn how to properly take advantage of Unreal Engine&amp;rsquo;s power! It&amp;rsquo;s known for being exclusively good for first person games.&lt;/p>
&lt;h1 id="how-does-unreal-work">How Does Unreal Work?&lt;/h1>
&lt;h2 id="coding-process">Coding Process&lt;/h2>
&lt;p>Unreal has 2 ways to code your games: &lt;strong>Blueprints&lt;/strong> and &lt;strong>C++&lt;/strong>&lt;/p>
&lt;h3 id="blueprints">Blueprints&lt;/h3>
&lt;p>Blueprints are a visual scripting interface that allows you to code using visual building blocks. It contains parts to it that reflect what you would see when making a class in C++: functions, variables, events, components&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://docs.unrealengine.com/5.0/Images/programming-and-scripting/blueprints-visual-scripting/QuickStart/BPQS_6_Step4.png" >
&lt;img src="https://docs.unrealengine.com/5.0/Images/programming-and-scripting/blueprints-visual-scripting/QuickStart/BPQS_6_Step4.png"
loading="lazy"
alt="Blueprints exmaple">
&lt;/a>
&lt;figcaption>Blueprints exmaple&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="c-coding">C++ Coding&lt;/h3>
&lt;p>Unreal Engine is built and compiled in C++, it comes with libraries that allow users to create their Unreal Objects, Classes, Modules, Game Systems, and more&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 184;
flex-basis: 443px"
>
&lt;a href="/p/my-unreal-adventure-blog-1-unreal-engine-intro/cplusShot.png" data-size="1920x1040">
&lt;img src="/p/my-unreal-adventure-blog-1-unreal-engine-intro/cplusShot.png"
width="1920"
height="1040"
srcset="/p/my-unreal-adventure-blog-1-unreal-engine-intro/cplusShot_hu15c650f631927a821a010d1e5ac398a8_303712_480x0_resize_box_3.png 480w, /p/my-unreal-adventure-blog-1-unreal-engine-intro/cplusShot_hu15c650f631927a821a010d1e5ac398a8_303712_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Image of Visual Studio">
&lt;/a>
&lt;figcaption>Image of Visual Studio&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="compatibility">Compatibility&lt;/h3>
&lt;p>The blueprint system and C++ enviornment is designed in a way that your code can easily be converted between the two types&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://d3kjluh73b9h9o.cloudfront.net/optimized/3X/f/6/f6a555c08687118b57ffc5050f0a1b60e6fe6527_2_339x500.png" >
&lt;img src="https://d3kjluh73b9h9o.cloudfront.net/optimized/3X/f/6/f6a555c08687118b57ffc5050f0a1b60e6fe6527_2_339x500.png"
loading="lazy"
alt="Image of Blueprint to C&amp;#43;&amp;#43; option">
&lt;/a>
&lt;figcaption>Image of Blueprint to C++ option&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="core-components">Core Components&lt;/h2>
&lt;p>There&amp;rsquo;s more for me to learn about the core workflow of Unreal but here is what I&amp;rsquo;ve grasped.&lt;/p>
&lt;p>There are 2 important pieces of Unreal Engine: &lt;strong>Actors&lt;/strong> and &lt;strong>GameModes&lt;/strong>&lt;/p>
&lt;h3 id="actors">Actors&lt;/h3>
&lt;p>Actors are objects that can be spawn/instantiated into the game world. It is an all encompassing role that can be any object, some examples are the camera, the player, even things that are not physical like starting location points.&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://docs.unrealengine.com/4.26/Images/BuildingWorlds/LDQuickStart/TableAndChairs.jpg" >
&lt;img src="https://docs.unrealengine.com/4.26/Images/BuildingWorlds/LDQuickStart/TableAndChairs.jpg"
loading="lazy"
alt="Image of Chair Actors">
&lt;/a>
&lt;figcaption>Image of Chair Actors&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="pawn-actors">Pawn Actors&lt;/h4>
&lt;p>A pawn actor is a more specifc type of actor. This is an actor that can be in UE&amp;rsquo;s words &lt;em>possessed&lt;/em>. I would like to say, you are able to control it during runtime to do certain actions. An example of this is the character that the player controls. The player will take control of this pawn and make it perform actions that progress the game and triggere events.&lt;/p>
&lt;p>The entity that controls a pawn is not limited to just the player. An AI could be the one controlling the pawn, for example with enemies.&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://gamedevacademy.org/wp-content/uploads/2020/05/ezgif-6-6c0eb29d6cf7.gif" >
&lt;img src="https://gamedevacademy.org/wp-content/uploads/2020/05/ezgif-6-6c0eb29d6cf7.gif"
loading="lazy"
alt="Gif of Enemy">
&lt;/a>
&lt;figcaption>Gif of Enemy&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h4 id="character-actors">Character Actors&lt;/h4>
&lt;p>A character actor is a &lt;em>varient&lt;/em> of the pawn actor, where it&amp;rsquo;s usage is still the same, but it comes with implementations of features such as movement related to land, water, sky. It also comes with skeleton mesh components which are allow complex animations to occur with the actor and a capsule which allows collision detection and interaction with the world. &lt;strong>This is recommended to be used for the actor that the player will control.&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://c.tenor.com/D0-dH0cw95YAAAAC/kingdomhearts-running.gif" >
&lt;img src="https://c.tenor.com/D0-dH0cw95YAAAAC/kingdomhearts-running.gif"
loading="lazy"
alt="Character Actor Example">
&lt;/a>
&lt;figcaption>Character Actor Example&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;em>An example of a character actor can be seen from the UE5 First-Person template:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copyright Epic Games, Inc. All Rights Reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;CoreMinimal.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;GameFramework/Character.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;PersonalityManGameCharacter.generated.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">UInputComponent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">USkeletalMeshComponent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">USceneComponent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">UCameraComponent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">UAnimMontage&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">USoundBase&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Declaration of the delegate that will be called when the Primary Action is triggered
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// It is declared as dynamic so it can be accessed also in Blueprints
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">DECLARE_DYNAMIC_MULTICAST_DELEGATE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FOnUseItem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">UCLASS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Game&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">APersonalityManGameCharacter&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">ACharacter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GENERATED_BODY&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** Pawn mesh: 1st person view (arms; seen only by self) */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VisibleDefaultsOnly&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Mesh&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">USkeletalMeshComponent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Mesh1P&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** First person camera */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VisibleAnywhere&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BlueprintReadOnly&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Camera&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">meta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">AllowPrivateAccess&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UCameraComponent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">FirstPersonCameraComponent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">APersonalityManGameCharacter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">BeginPlay&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** Base turn rate, in deg/sec. Other scaling may affect final turn rate. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EditDefaultsOnly&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BlueprintReadWrite&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;PlayerCameraSettings&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">GamepadSensitivity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EditDefaultsOnly&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BlueprintReadWrite&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;PlayerCameraSettings&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">MouseSensitivity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EditDefaultsOnly&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BlueprintReadWrite&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;PlayerMovementSettings&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">WalkSpeed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EditDefaultsOnly&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BlueprintReadWrite&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;PlayerMovementSettings&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">SprintSpeed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** Delegate to whom anyone can subscribe to receive this event */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPROPERTY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BlueprintAssignable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Category&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Interaction&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FOnUseItem&lt;/span> &lt;span class="n">OnUseItem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** Fires a projectile. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">OnPrimaryAction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** Handles moving forward/backward */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">MoveForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">Val&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** Handles strafing movement, left and right */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">MoveRight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">Val&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Called via mouse input to turn at a given rate.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param Rate This is a normalized rate, i.e. 1.0 means 100% of desired turn rate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">MouseTurnAtRate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">Rate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Called via mouse input to turn look up/down at a given rate.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param Rate This is a normalized rate, i.e. 1.0 means 100% of desired turn rate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">MouseLookUpRate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">Rate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Called via gamepad input to turn at a given rate.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param Rate This is a normalized rate, i.e. 1.0 means 100% of desired turn rate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">GamePadTurnAtRate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">Rate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Called via gamepad input to turn look up/down at a given rate.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param Rate This is a normalized rate, i.e. 1.0 means 100% of desired turn rate
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">GamePadLookUpAtRate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">Rate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetSprint&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">SetWalk&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">TouchData&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TouchData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">bIsPressed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">Location&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">FVector&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ZeroVector&lt;/span>&lt;span class="p">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">bIsPressed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ETouchIndex&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">FingerIndex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FVector&lt;/span> &lt;span class="n">Location&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">bMoved&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">BeginTouch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">ETouchIndex&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">FingerIndex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">FVector&lt;/span> &lt;span class="n">Location&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">EndTouch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">ETouchIndex&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">FingerIndex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">FVector&lt;/span> &lt;span class="n">Location&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">TouchUpdate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">ETouchIndex&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">FingerIndex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">FVector&lt;/span> &lt;span class="n">Location&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TouchData&lt;/span> &lt;span class="n">TouchItem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// APawn interface
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">SetupPlayerInputComponent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UInputComponent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">InputComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// End of APawn interface
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Configures input for touchscreen devices if there is a valid touch interface for doing so
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param InputComponent The input component pointer to bind controls to
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @returns true if touch controls were enabled.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">EnableTouchscreenMovement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UInputComponent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">InputComponent&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** Returns Mesh1P subobject **/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">USkeletalMeshComponent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">GetMesh1P&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">Mesh1P&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/** Returns FirstPersonCameraComponent subobject **/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UCameraComponent&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">GetFirstPersonCameraComponent&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">FirstPersonCameraComponent&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="gamemodes">GameModes&lt;/h3>
&lt;p>The name &amp;ldquo;gamemode&amp;rdquo; is pretty self-explanitory on the use case of this module. It defines the rules of your game and &amp;ldquo;what&amp;rdquo; the game is. Some examples are &amp;ldquo;how is the player spawned into the game&amp;rdquo;, &amp;ldquo;what systems are spawn&amp;rdquo;, &amp;ldquo;how many players can be in the game at once&amp;rdquo;, the list goes on.&lt;/p>
&lt;blockquote>
&lt;p>While certain fundamentals, like the number of players required to play, or the method by which those players join the game, are common to many types of games, limitless rule variations are possible depending on the specific game you are developing. Regardless of what those rules are, Game Modes are designed to define and implement them. There are currently two commonly-used base classes for Game Modes. - Unreal Engine Documentation&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>An example of a gamemode can be seen from the UE5 First-Person template:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copyright Epic Games, Inc. All Rights Reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;CoreMinimal.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;GameFramework/GameModeBase.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;PersonalityManGameGameMode.generated.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">UCLASS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">minimalapi&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">APersonalityManGameGameMode&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">AGameModeBase&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">GENERATED_BODY&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">APersonalityManGameGameMode&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copyright Epic Games, Inc. All Rights Reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;PersonalityManGameGameMode.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;PersonalityManGameCharacter.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;UObject/ConstructorHelpers.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">APersonalityManGameGameMode&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">APersonalityManGameGameMode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">Super&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// set default pawn class to our Blueprinted character
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">ConstructorHelpers&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">FClassFinder&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">APawn&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">PlayerPawnClassFinder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TEXT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/Game/FirstPerson/Blueprints/BP_FirstPersonCharacter&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DefaultPawnClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PlayerPawnClassFinder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="thats-it-for-now">That&amp;rsquo;s It For Now!&lt;/h1>
&lt;p>That&amp;rsquo;s all the information I&amp;rsquo;ve acculmulated so far, look out for the next blog where I start working on that first-person project, specifically the movement system!&lt;/p></description></item><item><title>DirectX 3D Intro</title><link>/p/directx-3d-intro/</link><pubDate>Wed, 22 Dec 2021 18:11:43 -0800</pubDate><guid>/p/directx-3d-intro/</guid><description>&lt;img src="https://media.giphy.com/media/hVsP8KfbcwItVhMg5s/giphy.gif" alt="Featured image of post DirectX 3D Intro" />&lt;p>I&amp;rsquo;ve been exploring Direct X 3D and it&amp;rsquo;s implementation as a Graphics Engine!
Wanted to share my notes on how to set it up in a quick and simple blog.&lt;/p>
&lt;p>There is a bunch of overhead involving creating a window before setuping Direct X 3D, I will not be covering it in this blog, but plan to cover it in another blog.&lt;/p>
&lt;p>All the code related to the contents of this blog come from my repository on &lt;a class="link" href="https://github.com/Esauidk/DirectXLearningProject" target="_blank" rel="noopener"
>Github&lt;/a>&lt;/p>
&lt;h1 id="direct-x-pipeline">Direct X Pipeline&lt;/h1>
&lt;p>&lt;strong>Before rendering an object in Direct X, there are components that need to be initialized&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Device&lt;/li>
&lt;li>Swap Chain&lt;/li>
&lt;li>Context&lt;/li>
&lt;/ul>
&lt;h2 id="device">Device&lt;/h2>
&lt;p>&lt;strong>The device is a component of Direct3D that allows you to allocate data structures and store information on the GPU about the current rendering state&lt;/strong>&lt;/p>
&lt;p>Examples of uses of the device are:&lt;/p>
&lt;ul>
&lt;li>RenderTargetView&lt;/li>
&lt;li>DepthStencilState&lt;/li>
&lt;li>CreateTexture2D&lt;/li>
&lt;li>CreateBuffer&lt;/li>
&lt;li>CreateVertexShader&lt;/li>
&lt;li>CreatePixelShader&lt;/li>
&lt;li>CreateInputLayout&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/direct3d-devices" target="_blank" rel="noopener"
>&lt;strong>For more information about the device&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="swap-chain">Swap Chain&lt;/h2>
&lt;p>The swap chain represent the current frame being presented to you, the viewer. The swap chain has a lot of settings that can be adjusted but the idea is that you have two(or more) buffers, the &lt;strong>front&lt;/strong> and &lt;strong>back&lt;/strong> buffers.&lt;/p>
&lt;p>The names &lt;strong>front&lt;/strong> and &lt;strong>back&lt;/strong> represent which buffer is the one being presented. The &lt;strong>back&lt;/strong> buffer will be where current draw calls are being directed to while the &lt;strong>front&lt;/strong> buffer will be what the viewer sees.&lt;/p>
&lt;p>Once the drawing of the &lt;strong>back&lt;/strong> buffer has been completed, the buffers will be &lt;em>switched&lt;/em> and the previous &lt;strong>back&lt;/strong> buffer will be the current &lt;strong>front&lt;/strong> buffer while the previous &lt;strong>front&lt;/strong> buffer will be the current &lt;strong>back&lt;/strong> buffer&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Swap_chain_depiction.svg/440px-Swap_chain_depiction.svg.png" >
&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Swap_chain_depiction.svg/440px-Swap_chain_depiction.svg.png"
loading="lazy"
alt="A representation of a triple buffer swap chain">
&lt;/a>
&lt;figcaption>A representation of a triple buffer swap chain&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/what-is-a-swap-chain-" target="_blank" rel="noopener"
>&lt;strong>For more information about the swap chain&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="context">Context&lt;/h2>
&lt;p>&lt;strong>The context holds all the resources being used in pipeline&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>VertexBuffer
: A collection of vertex data of the current object&lt;/li>
&lt;li>IndexBuffer
: A collection of indexes representing the order of verticies to use when drawing the desired topology shape&lt;/li>
&lt;li>VerexShader
: GPU instructions used to perform mathmatical operations to each vertex positioning before presentation&lt;/li>
&lt;li>PixelShader
: GPU instructions used to perform mathmatical operations to each vertex coloring before presentation&lt;/li>
&lt;li>Topology
: The geometric shape to use when rendering verticies (EX: Lines &amp;amp; Triangles)&lt;/li>
&lt;li>InputLayout
: A definition of the low level layout of data being sent to the GPU and their shaders (Vertex Data Definition, Color Data Definition, etc)&lt;/li>
&lt;li>ConstantBuffer
: A buffer that is filled with custom data and available to the designated shader at all times. (Data can only be updated by replacing the buffer with an updated version)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>The context allows you to attach created data structures(listed above) and attach them to the current render pipeline&lt;/strong>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/direct3d11/overviews-direct3d-11-devices-intro" target="_blank" rel="noopener"
>&lt;strong>For more information about the context&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="extra">Extra&lt;/h2>
&lt;p>&lt;strong>There are more parts of the pipeline not covered in this readme&lt;/strong>&lt;/p>
&lt;p>&lt;figure
>
&lt;a href="https://docs.microsoft.com/en-us/windows/win32/direct3d11/images/d3d11-pipeline-stages.jpg" >
&lt;img src="https://docs.microsoft.com/en-us/windows/win32/direct3d11/images/d3d11-pipeline-stages.jpg"
loading="lazy"
alt="Image of Direct3D Pipeline">
&lt;/a>
&lt;figcaption>Image of Direct3D Pipeline&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/windows/win32/direct3d11/overviews-direct3d-11-graphics-pipeline" target="_blank" rel="noopener"
>&lt;strong>For more information of the pipeline&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="creating-an-object">Creating an Object&lt;/h2>
&lt;p>&lt;strong>Creating an object involves a combination of using the device to allocate data structures(like buffers) and using the context to attach them to the pipeline. Every object must go through creating, defining, and attaching pipeline resources before being raterized to the swap chain buffers&lt;/strong>&lt;/p>
&lt;h3 id="example-of-creating-a-box">Example of creating a box&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Vertex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">////Create Vertex Buffer (2d Triangle)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Vertex&lt;/span> &lt;span class="n">vertices&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11Buffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pVertexBuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_BUFFER_DESC&lt;/span> &lt;span class="n">bd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BindFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_BIND_VERTEX_BUFFER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Usage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_USAGE_DEFAULT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CPUAccessFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MiscFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ByteWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertices&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StructureByteStride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Vertex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_SUBRESOURCE_DATA&lt;/span> &lt;span class="n">sd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pSysMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vertices&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">sd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pVertexBuffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach Vertex Buffer to Pipeline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">UINT&lt;/span> &lt;span class="n">stride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Vertex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">UINT&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IASetVertexBuffers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0u&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pVertexBuffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAddressOf&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stride&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Create Index Buffer (Used for reusing predfined vertices for multiple triangles)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span> &lt;span class="n">indices&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11Buffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pIndexBuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_BUFFER_DESC&lt;/span> &lt;span class="n">ibd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BindFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_BIND_INDEX_BUFFER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Usage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_USAGE_DEFAULT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CPUAccessFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MiscFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ByteWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">indices&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StructureByteStride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_SUBRESOURCE_DATA&lt;/span> &lt;span class="n">isd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">isd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pSysMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">indices&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ibd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">isd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pIndexBuffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach Index Buffer to Pipeline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IASetIndexBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pIndexBuffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">DXGI_FORMAT_R16_UINT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Create const buffer for transformation matrix (Do matrix transformation instead of moving sending a new vertex buffer)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">ConstantBuffer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMATRIX&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">ConstantBuffer&lt;/span> &lt;span class="n">cb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixTranspose&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixRotationZ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">angle&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixRotationX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">angle&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixTranslation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">4.0f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixPerspectiveLH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.0f&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="mf">4.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.5f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">10.0f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11Buffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pConstantBuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_BUFFER_DESC&lt;/span> &lt;span class="n">cbd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BindFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_BIND_CONSTANT_BUFFER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Usage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_USAGE_DYNAMIC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CPUAccessFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_CPU_ACCESS_WRITE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MiscFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ByteWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StructureByteStride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_SUBRESOURCE_DATA&lt;/span> &lt;span class="n">csd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">csd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pSysMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cbd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">csd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pConstantBuffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach const buffer to vertex shader
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VSSetConstantBuffers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pConstantBuffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAddressOf&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Create another constant buffer for tagging triangle indexes to colors (individual colors per cube face)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">ConstantBuffer2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">face_colors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">ConstantBuffer2&lt;/span> &lt;span class="n">cb2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11Buffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pConstantBuffer2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_BUFFER_DESC&lt;/span> &lt;span class="n">cbd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BindFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_BIND_CONSTANT_BUFFER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Usage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_USAGE_DEFAULT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CPUAccessFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MiscFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ByteWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cb2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StructureByteStride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_SUBRESOURCE_DATA&lt;/span> &lt;span class="n">csd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">csd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pSysMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cb2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cbd2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">csd2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pConstantBuffer2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach const buffer to vertex shader
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">PSSetConstantBuffers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pConstantBuffer2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAddressOf&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Create Pixel Shader
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11PixelShader&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pPixelShader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3DBlob&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pBlob&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">D3DReadFileToBlob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;PixelShader.cso&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pBlob&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreatePixelShader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pBlob&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetBufferPointer&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">pBlob&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetBufferSize&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pPixelShader&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach Pixel Shader
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">PSSetShader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pPixelShader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create Vertex Shader
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11VertexShader&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pVertexShader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">D3DReadFileToBlob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;VertexShader.cso&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pBlob&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateVertexShader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pBlob&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetBufferPointer&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">pBlob&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetBufferSize&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pVertexShader&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Attach Vertex Shader to Pipeline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//pContext-&amp;gt;VSSetShader(pVertexShader.Get(), nullptr, 0u);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Input (vertex) layout (2d position only)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11InputLayout&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pInputLayout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">D3D11_INPUT_ELEMENT_DESC&lt;/span> &lt;span class="n">ied&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// // Reads positions as 2 4 byte values
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;POSITION&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DXGI_FORMAT_R32G32B32_FLOAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_INPUT_PER_VERTEX_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// // Reads color as 4 byte values and normalizes them from 0 - 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;COLOR&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DXGI_FORMAT_R8G8B8A8_UNORM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_APPEND_ALIGNED_ELEMENT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_INPUT_PER_VERTEX_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateInputLayout&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ied&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UINT&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ied&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pBlob&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetBufferPointer&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pBlob&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetBufferSize&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pInputLayout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Bind Input Layout
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IASetInputLayout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pInputLayout&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Bind Render Target
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// **COME BACK TO THIS IN CASE ERROR**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">OMSetRenderTargets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pTarget&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAddressOf&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">pDSV&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Set primitive topology to triangle list (groups of verticies make multiple triangles)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IASetPrimitiveTopology&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO_ONLY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">DrawIndexed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="vertex-buffer">Vertex Buffer&lt;/h3>
&lt;p>&lt;strong>Device Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Vertex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">////Create Vertex Buffer (2d Triangle)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Vertex&lt;/span> &lt;span class="n">vertices&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11Buffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pVertexBuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_BUFFER_DESC&lt;/span> &lt;span class="n">bd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BindFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_BIND_VERTEX_BUFFER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Usage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_USAGE_DEFAULT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CPUAccessFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MiscFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ByteWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertices&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StructureByteStride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Vertex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_SUBRESOURCE_DATA&lt;/span> &lt;span class="n">sd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pSysMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vertices&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">sd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pVertexBuffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Context Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach Vertex Buffer to Pipeline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">UINT&lt;/span> &lt;span class="n">stride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Vertex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">UINT&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IASetVertexBuffers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0u&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pVertexBuffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAddressOf&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stride&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="index-buffer">Index Buffer&lt;/h3>
&lt;p>&lt;strong>Device Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Create Index Buffer (Used for reusing predfined vertices for multiple triangles)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span> &lt;span class="n">indices&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11Buffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pIndexBuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_BUFFER_DESC&lt;/span> &lt;span class="n">ibd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BindFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_BIND_INDEX_BUFFER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Usage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_USAGE_DEFAULT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CPUAccessFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MiscFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ByteWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">indices&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ibd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StructureByteStride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_SUBRESOURCE_DATA&lt;/span> &lt;span class="n">isd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">isd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pSysMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">indices&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ibd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">isd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pIndexBuffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Context Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach Index Buffer to Pipeline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IASetIndexBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pIndexBuffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">DXGI_FORMAT_R16_UINT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="constant-buffers-vertex-and-pixel">Constant Buffers (Vertex and Pixel)&lt;/h3>
&lt;p>&lt;strong>Device Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Create const buffer for transformation matrix (Do matrix transformation instead of moving sending a new vertex buffer)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">ConstantBuffer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMATRIX&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">ConstantBuffer&lt;/span> &lt;span class="n">cb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixTranspose&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixRotationZ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">angle&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixRotationX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">angle&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixTranslation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">4.0f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dx&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixPerspectiveLH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.0f&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="mf">4.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.5f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">10.0f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11Buffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pConstantBuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_BUFFER_DESC&lt;/span> &lt;span class="n">cbd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BindFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_BIND_CONSTANT_BUFFER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Usage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_USAGE_DYNAMIC&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CPUAccessFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_CPU_ACCESS_WRITE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MiscFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ByteWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StructureByteStride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_SUBRESOURCE_DATA&lt;/span> &lt;span class="n">csd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">csd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pSysMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cbd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">csd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pConstantBuffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Context Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach const buffer to vertex shader
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">VSSetConstantBuffers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pConstantBuffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAddressOf&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Device Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Create another constant buffer for tagging triangle indexes to colors (individual colors per cube face)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">ConstantBuffer2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">face_colors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">ConstantBuffer2&lt;/span> &lt;span class="n">cb2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11Buffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pConstantBuffer2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_BUFFER_DESC&lt;/span> &lt;span class="n">cbd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">BindFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_BIND_CONSTANT_BUFFER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Usage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">D3D11_USAGE_DEFAULT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CPUAccessFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MiscFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ByteWidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cb2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cbd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">StructureByteStride&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0u&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">D3D11_SUBRESOURCE_DATA&lt;/span> &lt;span class="n">csd2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">csd2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pSysMem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cb2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">cbd2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">csd2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pConstantBuffer2&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Context Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Attach const buffer to vertex shader
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">PSSetConstantBuffers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pConstantBuffer2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetAddressOf&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="input-layout">Input Layout&lt;/h3>
&lt;p>&lt;strong>Device Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Input (vertex) layout (2d position only)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">wrl&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ComPtr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ID3D11InputLayout&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pInputLayout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">D3D11_INPUT_ELEMENT_DESC&lt;/span> &lt;span class="n">ied&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// // Reads positions as 2 4 byte values
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;POSITION&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DXGI_FORMAT_R32G32B32_FLOAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_INPUT_PER_VERTEX_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// // Reads color as 4 byte values and normalizes them from 0 - 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;COLOR&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DXGI_FORMAT_R8G8B8A8_UNORM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_APPEND_ALIGNED_ELEMENT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_INPUT_PER_VERTEX_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GFX_THROW_INFO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pDevice&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">CreateInputLayout&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ied&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">UINT&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ied&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pBlob&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetBufferPointer&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pBlob&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetBufferSize&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pInputLayout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Context Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//// Bind Input Layout
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IASetInputLayout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pInputLayout&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="topology">Topology&lt;/h3>
&lt;p>&lt;strong>Context Step&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Set primitive topology to triangle list (groups of verticies make multiple triangles)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">pContext&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">IASetPrimitiveTopology&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="drawable--bindable-framework-design">Drawable &amp;amp; Bindable Framework Design&lt;/h1>
&lt;p>&lt;em>&lt;strong>The Drawable &amp;amp; Bindable Graphics framework was designed by PlanetChilli (Otherwise known as ChiliTomatoNoodle on yt)&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;strong>The framework is designed to shorten and abstract the creation of objects in DirectX. There are 3 parts of it, the Graphics interface, the Bindable Interface, and the Drawable Interface. These all work together to allow multiple object creation in a single 3D scene&lt;/strong>&lt;/p>
&lt;h2 id="graphics">Graphics&lt;/h2>
&lt;p>&lt;strong>This interface is the main controller of 3D scene&lt;/strong>&lt;/p>
&lt;h3 id="pipeline-setup">Pipeline setup&lt;/h3>
&lt;p>&lt;strong>This interface will handle the creation of the crucial components of the pipeline (Device, Swap Chain, Context)&lt;/strong>&lt;/p>
&lt;p>Along with that, it will keep a reference to:&lt;/p>
&lt;ul>
&lt;li>Device&lt;/li>
&lt;li>Swap Chain&lt;/li>
&lt;li>Context&lt;/li>
&lt;li>RenderTargetView
: A pipeline handled data structure for referencing the current back buffer&lt;/li>
&lt;li>DepthStencilView
: A pipeline handled data structure for referncing the current depth view frame&lt;/li>
&lt;li>A projection matrix
: Used for translating the vertex position to 3D camera space (perspective, orthographic)&lt;/li>
&lt;/ul>
&lt;p>There are also five key functions to the Graphics interface:&lt;/p>
&lt;ul>
&lt;li>&lt;code>EndFrame()&lt;/code>
: Presents the current back buffer by switching the front and back buffer&lt;/li>
&lt;li>&lt;code>ClearBuffer()&lt;/code>
: Wipes everything on the current back buffer&lt;/li>
&lt;li>&lt;code>DrawIndex()&lt;/code>
: Draws onto the back buffer with the resources attached to the pipeline (assumes that indexing is done, can be changed to work without indexing)&lt;/li>
&lt;li>&lt;code>SetProjection()&lt;/code>
: Updates the current projection matrix in the 3D Scene&lt;/li>
&lt;li>&lt;code>GetProjection()&lt;/code>
: Returns the current project matrix being used in the 3D scene&lt;/li>
&lt;/ul>
&lt;h2 id="bindable">Bindable&lt;/h2>
&lt;p>&lt;strong>This interface represents one of the data structures that can be attached to the pipline&lt;/strong>&lt;/p>
&lt;p>Some examples of Bindable structures are:&lt;/p>
&lt;ul>
&lt;li>VertexBuffer&lt;/li>
&lt;li>ConstantBuffers&lt;/li>
&lt;li>IndexBuffer&lt;/li>
&lt;li>InputLayout&lt;/li>
&lt;li>Shaders (Vertex and Pixel)&lt;/li>
&lt;li>Topology&lt;/li>
&lt;li>etc&lt;/li>
&lt;/ul>
&lt;p>The only function required of a Bindable is called &lt;code>Bind()&lt;/code>. The expected implementation is that the context step of attaching to the pipeline is done in this function while the device step is handled in the constructor.&lt;/p>
&lt;h3 id="helper-functions">Helper Functions&lt;/h3>
&lt;p>&lt;strong>There are helper functions that only Bindable objects can call, these are implemented by the Bindable interface and allow Bindables to interact with the Graphics instance:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>GetContext()&lt;/code>
: Returns the current reference to the Context of a Graphics instance&lt;/li>
&lt;li>&lt;code>GetDevice()&lt;/code>
: Returns the current reference to the Device of a Graphics instance&lt;/li>
&lt;/ul>
&lt;h2 id="drawable">Drawable&lt;/h2>
&lt;p>&lt;strong>This interface represents a drawable object such as a Box, Triangle, or any other 3D(or 2D) object&lt;/strong>&lt;/p>
&lt;p>There are 5 functions tied to a Drawable:&lt;/p>
&lt;ul>
&lt;li>&lt;code>GetTransformXM()&lt;/code>
: Returns the current transformation matrix of the object (rotation + translation + etc, excluding the projection matrix stored in Graphics)&lt;/li>
&lt;li>&lt;code>Draw()&lt;/code>
: Binds the Drawable&amp;rsquo;s bindables to the pipeline and tells the Graphics instance to draw it&lt;/li>
&lt;li>&lt;code>AddBind()&lt;/code>
: Adds a bindable to the Drawable&amp;rsquo;s collection&lt;/li>
&lt;li>&lt;code>AddIndexBuffer()&lt;/code>
: Performs the same as AddBind() except with the condition that only 1 IndexBuffer can be added to a Drawable object&lt;/li>
&lt;li>&lt;code>Update()&lt;/code>
: Performs changes to a Drawable&amp;rsquo;s state based off a change of time (movement, rotation, scaling, etc)&lt;/li>
&lt;/ul>
&lt;p>The Drawable interface already implements the crucial functions listed, new Drawables will only need to implement certain functions due to behavior varying between Drawables:&lt;/p>
&lt;ul>
&lt;li>&lt;code>GetTransformXM()&lt;/code>&lt;/li>
&lt;li>&lt;code>Update()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The expected behavior is that creating Bindables and adding them to Drawables are done in a Drawable constructor&lt;/p>
&lt;h3 id="example-of-the-drawable--bindable-framework">Example of the Drawable &amp;amp; Bindable Framework&lt;/h3>
&lt;p>&lt;strong>Box.h&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;Drawable.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Box&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Drawable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Box&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Graphics&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">gfx&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mt19937&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">rng&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">adist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">ddist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">odist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">rdist&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DirectX&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMATRIX&lt;/span> &lt;span class="n">GetTransformXM&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// z-axis
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">roll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// x-axis
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">pitch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// y-axis
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">yaw&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">theta&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">phi&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">chi&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// z-axis
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">droll&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// x-axis
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">dpitch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// y-axis
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">dyaw&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">dtheta&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">dphi&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">dchi&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Box.cpp (constructor)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Box&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Box&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Graphics&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">gfx&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mt19937&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">rng&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">adist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">ddist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">odist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">rdist&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rdist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">droll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ddist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dpitch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ddist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dyaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ddist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dphi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">odist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dtheta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">odist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dchi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">odist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">theta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">phi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Vertex&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Vertex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vertices&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AddBind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">VertexBuffer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Vertex&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gfx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vertices&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">pvs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">VertexShader&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gfx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;VertexShader.cso&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">pvbc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pvs&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetByteCode&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AddBind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pvs&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AddBind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PixelShader&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gfx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">L&lt;/span>&lt;span class="s">&amp;#34;PixelShader.cso&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">indices&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AddIndexBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">IndexBuffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gfx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">indices&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">FaceColorConstantBuffer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">face_colors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">D3D11_INPUT_ELEMENT_DESC&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ied&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;POSITION&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DXGI_FORMAT_R32G32B32_FLOAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_INPUT_PER_VERTEX_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;COLOR&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DXGI_FORMAT_R8G8B8A8_UNORM&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_APPEND_ALIGNED_ELEMENT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">D3D11_INPUT_PER_VERTEX_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AddBind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">InputLayout&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gfx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ied&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pvbc&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AddBind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Topology&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AddBind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TransformConstantBuffer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gfx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Box.cpp (Update)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">Box&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">roll&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">droll&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pitch&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">dpitch&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">yaw&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">dyaw&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">phi&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">dphi&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chi&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">dchi&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Box.cpp (GetTransformXM)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">DirectX&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMATRIX&lt;/span> &lt;span class="n">Box&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">GetTransformXM&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">DirectX&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixRotationRollPitchYaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pitch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">yaw&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">roll&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DirectX&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixTranslation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DirectX&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixRotationRollPitchYaw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">theta&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">phi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chi&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DirectX&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixTranslation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">20.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Main&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mt19937&lt;/span> &lt;span class="n">rng&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">random_device&lt;/span>&lt;span class="p">{}());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">adist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.1415f&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">2.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ddist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.1415f&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">2.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">odist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.1415f&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">2.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">uniform_real_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rdist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">6.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">20.0f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">150&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">boxes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Box&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">Graphics&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="n">here&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rng&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ddist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">odist&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rdist&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">Graphics&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="n">here&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">SetProjecton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DirectX&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">XMMatrixPerspectiveLH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.0f&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mf">4.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.5f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">40.0f&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Some other function that executes a frame&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">dt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">timer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Mark&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">Graphics&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="n">here&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ClearBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.07f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.12f&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">b&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">boxes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dt&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Draw&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">Graphics&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="n">here&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">Graphics&lt;/span> &lt;span class="n">instance&lt;/span> &lt;span class="n">here&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">EndFrame&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;figure
>
&lt;a href="https://media.giphy.com/media/hVsP8KfbcwItVhMg5s/giphy-downsized-large.gif" >
&lt;img src="https://media.giphy.com/media/hVsP8KfbcwItVhMg5s/giphy-downsized-large.gif"
loading="lazy"
alt="Result of Code">
&lt;/a>
&lt;figcaption>Result of Code&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;a class="link" href="https://media.giphy.com/media/hVsP8KfbcwItVhMg5s/giphy-downsized.gif" target="_blank" rel="noopener"
>GIF Source Link&lt;/a>&lt;/p></description></item></channel></rss>